// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: js_event.proto

#include "js_event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_js_5fevent_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_js_5fevent_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Axes;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_js_5fevent_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Buttons;
}  // namespace protobuf_js_5fevent_2eproto
namespace controller {
class jsEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<jsEvent>
      _instance;
} _jsEvent_default_instance_;
class XboxDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Xbox>
      _instance;
} _Xbox_default_instance_;
class AxesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Axes>
      _instance;
} _Axes_default_instance_;
class ButtonsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Buttons>
      _instance;
} _Buttons_default_instance_;
}  // namespace controller
namespace protobuf_js_5fevent_2eproto {
static void InitDefaultsjsEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::controller::_jsEvent_default_instance_;
    new (ptr) ::controller::jsEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::controller::jsEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_jsEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsjsEvent}, {}};

static void InitDefaultsXbox() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::controller::_Xbox_default_instance_;
    new (ptr) ::controller::Xbox();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::controller::Xbox::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Xbox =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsXbox}, {
      &protobuf_js_5fevent_2eproto::scc_info_Axes.base,
      &protobuf_js_5fevent_2eproto::scc_info_Buttons.base,}};

static void InitDefaultsAxes() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::controller::_Axes_default_instance_;
    new (ptr) ::controller::Axes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::controller::Axes::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Axes =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAxes}, {}};

static void InitDefaultsButtons() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::controller::_Buttons_default_instance_;
    new (ptr) ::controller::Buttons();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::controller::Buttons::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Buttons =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsButtons}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_jsEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Xbox.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Axes.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Buttons.base);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::jsEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::jsEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::jsEvent, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::jsEvent, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::jsEvent, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::jsEvent, number_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::Xbox, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::Xbox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::Xbox, axes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::Xbox, buttons_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::Axes, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::Axes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::Axes, l_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::Axes, l_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::Axes, r_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::Axes, r_y_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::Buttons, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::Buttons, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::Buttons, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::Buttons, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::Buttons, b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::Buttons, a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::Buttons, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::Buttons, rb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::Buttons, lb_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::controller::jsEvent)},
  { 13, 20, sizeof(::controller::Xbox)},
  { 22, 31, sizeof(::controller::Axes)},
  { 35, 47, sizeof(::controller::Buttons)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::controller::_jsEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::controller::_Xbox_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::controller::_Axes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::controller::_Buttons_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "js_event.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016js_event.proto\022\ncontroller\"D\n\007jsEvent\022"
      "\014\n\004time\030\001 \002(\r\022\r\n\005value\030\002 \002(\005\022\014\n\004type\030\003 \002"
      "(\r\022\016\n\006number\030\004 \002(\r\"L\n\004Xbox\022\036\n\004axes\030\001 \001(\013"
      "2\020.controller.Axes\022$\n\007buttons\030\002 \001(\0132\023.co"
      "ntroller.Buttons\"F\n\004Axes\022\016\n\003l_x\030\001 \001(\021:\0010"
      "\022\016\n\003l_y\030\002 \001(\021:\0010\022\016\n\003r_x\030\003 \001(\021:\0010\022\016\n\003r_y\030"
      "\004 \001(\021:\0010\"\215\001\n\007Buttons\022\020\n\001x\030\001 \001(\010:\005false\022\020"
      "\n\001y\030\002 \001(\010:\005false\022\020\n\001b\030\003 \001(\010:\005false\022\020\n\001a\030"
      "\004 \001(\010:\005false\022\024\n\005start\030\005 \001(\010:\005false\022\021\n\002rb"
      "\030\006 \001(\010:\005false\022\021\n\002lb\030\007 \001(\010:\005false"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 392);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "js_event.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_js_5fevent_2eproto
namespace controller {

// ===================================================================

void jsEvent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int jsEvent::kTimeFieldNumber;
const int jsEvent::kValueFieldNumber;
const int jsEvent::kTypeFieldNumber;
const int jsEvent::kNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

jsEvent::jsEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_js_5fevent_2eproto::scc_info_jsEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:controller.jsEvent)
}
jsEvent::jsEvent(const jsEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_) -
    reinterpret_cast<char*>(&time_)) + sizeof(number_));
  // @@protoc_insertion_point(copy_constructor:controller.jsEvent)
}

void jsEvent::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_) -
      reinterpret_cast<char*>(&time_)) + sizeof(number_));
}

jsEvent::~jsEvent() {
  // @@protoc_insertion_point(destructor:controller.jsEvent)
  SharedDtor();
}

void jsEvent::SharedDtor() {
}

void jsEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* jsEvent::descriptor() {
  ::protobuf_js_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_js_5fevent_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const jsEvent& jsEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_js_5fevent_2eproto::scc_info_jsEvent.base);
  return *internal_default_instance();
}


void jsEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:controller.jsEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_) -
        reinterpret_cast<char*>(&time_)) + sizeof(number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool jsEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:controller.jsEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 number = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:controller.jsEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:controller.jsEvent)
  return false;
#undef DO_
}

void jsEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:controller.jsEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // required int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  // required uint32 type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // required uint32 number = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->number(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:controller.jsEvent)
}

::google::protobuf::uint8* jsEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:controller.jsEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // required int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  // required uint32 type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // required uint32 number = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->number(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:controller.jsEvent)
  return target;
}

size_t jsEvent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:controller.jsEvent)
  size_t total_size = 0;

  if (has_time()) {
    // required uint32 time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time());
  }

  if (has_value()) {
    // required int32 value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());
  }

  if (has_type()) {
    // required uint32 type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_number()) {
    // required uint32 number = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->number());
  }

  return total_size;
}
size_t jsEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:controller.jsEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time());

    // required int32 value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());

    // required uint32 type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required uint32 number = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->number());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void jsEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:controller.jsEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const jsEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const jsEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:controller.jsEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:controller.jsEvent)
    MergeFrom(*source);
  }
}

void jsEvent::MergeFrom(const jsEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:controller.jsEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      number_ = from.number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void jsEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:controller.jsEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void jsEvent::CopyFrom(const jsEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:controller.jsEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool jsEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void jsEvent::Swap(jsEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void jsEvent::InternalSwap(jsEvent* other) {
  using std::swap;
  swap(time_, other->time_);
  swap(value_, other->value_);
  swap(type_, other->type_);
  swap(number_, other->number_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata jsEvent::GetMetadata() const {
  protobuf_js_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_js_5fevent_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Xbox::InitAsDefaultInstance() {
  ::controller::_Xbox_default_instance_._instance.get_mutable()->axes_ = const_cast< ::controller::Axes*>(
      ::controller::Axes::internal_default_instance());
  ::controller::_Xbox_default_instance_._instance.get_mutable()->buttons_ = const_cast< ::controller::Buttons*>(
      ::controller::Buttons::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Xbox::kAxesFieldNumber;
const int Xbox::kButtonsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Xbox::Xbox()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_js_5fevent_2eproto::scc_info_Xbox.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:controller.Xbox)
}
Xbox::Xbox(const Xbox& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_axes()) {
    axes_ = new ::controller::Axes(*from.axes_);
  } else {
    axes_ = NULL;
  }
  if (from.has_buttons()) {
    buttons_ = new ::controller::Buttons(*from.buttons_);
  } else {
    buttons_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:controller.Xbox)
}

void Xbox::SharedCtor() {
  ::memset(&axes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buttons_) -
      reinterpret_cast<char*>(&axes_)) + sizeof(buttons_));
}

Xbox::~Xbox() {
  // @@protoc_insertion_point(destructor:controller.Xbox)
  SharedDtor();
}

void Xbox::SharedDtor() {
  if (this != internal_default_instance()) delete axes_;
  if (this != internal_default_instance()) delete buttons_;
}

void Xbox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Xbox::descriptor() {
  ::protobuf_js_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_js_5fevent_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Xbox& Xbox::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_js_5fevent_2eproto::scc_info_Xbox.base);
  return *internal_default_instance();
}


void Xbox::Clear() {
// @@protoc_insertion_point(message_clear_start:controller.Xbox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(axes_ != NULL);
      axes_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(buttons_ != NULL);
      buttons_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Xbox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:controller.Xbox)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .controller.Axes axes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_axes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .controller.Buttons buttons = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_buttons()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:controller.Xbox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:controller.Xbox)
  return false;
#undef DO_
}

void Xbox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:controller.Xbox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .controller.Axes axes = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_axes(), output);
  }

  // optional .controller.Buttons buttons = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_buttons(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:controller.Xbox)
}

::google::protobuf::uint8* Xbox::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:controller.Xbox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .controller.Axes axes = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_axes(), deterministic, target);
  }

  // optional .controller.Buttons buttons = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_buttons(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:controller.Xbox)
  return target;
}

size_t Xbox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:controller.Xbox)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .controller.Axes axes = 1;
    if (has_axes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *axes_);
    }

    // optional .controller.Buttons buttons = 2;
    if (has_buttons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *buttons_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Xbox::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:controller.Xbox)
  GOOGLE_DCHECK_NE(&from, this);
  const Xbox* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Xbox>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:controller.Xbox)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:controller.Xbox)
    MergeFrom(*source);
  }
}

void Xbox::MergeFrom(const Xbox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:controller.Xbox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_axes()->::controller::Axes::MergeFrom(from.axes());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_buttons()->::controller::Buttons::MergeFrom(from.buttons());
    }
  }
}

void Xbox::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:controller.Xbox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Xbox::CopyFrom(const Xbox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:controller.Xbox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Xbox::IsInitialized() const {
  return true;
}

void Xbox::Swap(Xbox* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Xbox::InternalSwap(Xbox* other) {
  using std::swap;
  swap(axes_, other->axes_);
  swap(buttons_, other->buttons_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Xbox::GetMetadata() const {
  protobuf_js_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_js_5fevent_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Axes::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Axes::kLXFieldNumber;
const int Axes::kLYFieldNumber;
const int Axes::kRXFieldNumber;
const int Axes::kRYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Axes::Axes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_js_5fevent_2eproto::scc_info_Axes.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:controller.Axes)
}
Axes::Axes(const Axes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&l_x_, &from.l_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&r_y_) -
    reinterpret_cast<char*>(&l_x_)) + sizeof(r_y_));
  // @@protoc_insertion_point(copy_constructor:controller.Axes)
}

void Axes::SharedCtor() {
  ::memset(&l_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&r_y_) -
      reinterpret_cast<char*>(&l_x_)) + sizeof(r_y_));
}

Axes::~Axes() {
  // @@protoc_insertion_point(destructor:controller.Axes)
  SharedDtor();
}

void Axes::SharedDtor() {
}

void Axes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Axes::descriptor() {
  ::protobuf_js_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_js_5fevent_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Axes& Axes::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_js_5fevent_2eproto::scc_info_Axes.base);
  return *internal_default_instance();
}


void Axes::Clear() {
// @@protoc_insertion_point(message_clear_start:controller.Axes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&l_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&r_y_) -
        reinterpret_cast<char*>(&l_x_)) + sizeof(r_y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Axes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:controller.Axes)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 l_x = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_l_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &l_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 l_y = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_l_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &l_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 r_x = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_r_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &r_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 r_y = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_r_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &r_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:controller.Axes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:controller.Axes)
  return false;
#undef DO_
}

void Axes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:controller.Axes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 l_x = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->l_x(), output);
  }

  // optional sint32 l_y = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->l_y(), output);
  }

  // optional sint32 r_x = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->r_x(), output);
  }

  // optional sint32 r_y = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->r_y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:controller.Axes)
}

::google::protobuf::uint8* Axes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:controller.Axes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 l_x = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->l_x(), target);
  }

  // optional sint32 l_y = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->l_y(), target);
  }

  // optional sint32 r_x = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->r_x(), target);
  }

  // optional sint32 r_y = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->r_y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:controller.Axes)
  return target;
}

size_t Axes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:controller.Axes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional sint32 l_x = 1 [default = 0];
    if (has_l_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->l_x());
    }

    // optional sint32 l_y = 2 [default = 0];
    if (has_l_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->l_y());
    }

    // optional sint32 r_x = 3 [default = 0];
    if (has_r_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->r_x());
    }

    // optional sint32 r_y = 4 [default = 0];
    if (has_r_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->r_y());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Axes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:controller.Axes)
  GOOGLE_DCHECK_NE(&from, this);
  const Axes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Axes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:controller.Axes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:controller.Axes)
    MergeFrom(*source);
  }
}

void Axes::MergeFrom(const Axes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:controller.Axes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      l_x_ = from.l_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      l_y_ = from.l_y_;
    }
    if (cached_has_bits & 0x00000004u) {
      r_x_ = from.r_x_;
    }
    if (cached_has_bits & 0x00000008u) {
      r_y_ = from.r_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Axes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:controller.Axes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Axes::CopyFrom(const Axes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:controller.Axes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Axes::IsInitialized() const {
  return true;
}

void Axes::Swap(Axes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Axes::InternalSwap(Axes* other) {
  using std::swap;
  swap(l_x_, other->l_x_);
  swap(l_y_, other->l_y_);
  swap(r_x_, other->r_x_);
  swap(r_y_, other->r_y_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Axes::GetMetadata() const {
  protobuf_js_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_js_5fevent_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Buttons::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Buttons::kXFieldNumber;
const int Buttons::kYFieldNumber;
const int Buttons::kBFieldNumber;
const int Buttons::kAFieldNumber;
const int Buttons::kStartFieldNumber;
const int Buttons::kRbFieldNumber;
const int Buttons::kLbFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Buttons::Buttons()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_js_5fevent_2eproto::scc_info_Buttons.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:controller.Buttons)
}
Buttons::Buttons(const Buttons& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&lb_) -
    reinterpret_cast<char*>(&x_)) + sizeof(lb_));
  // @@protoc_insertion_point(copy_constructor:controller.Buttons)
}

void Buttons::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lb_) -
      reinterpret_cast<char*>(&x_)) + sizeof(lb_));
}

Buttons::~Buttons() {
  // @@protoc_insertion_point(destructor:controller.Buttons)
  SharedDtor();
}

void Buttons::SharedDtor() {
}

void Buttons::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Buttons::descriptor() {
  ::protobuf_js_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_js_5fevent_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Buttons& Buttons::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_js_5fevent_2eproto::scc_info_Buttons.base);
  return *internal_default_instance();
}


void Buttons::Clear() {
// @@protoc_insertion_point(message_clear_start:controller.Buttons)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lb_) -
        reinterpret_cast<char*>(&x_)) + sizeof(lb_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Buttons::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:controller.Buttons)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool x = 1 [default = false];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool y = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool b = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool a = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool start = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool rb = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_rb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool lb = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_lb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:controller.Buttons)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:controller.Buttons)
  return false;
#undef DO_
}

void Buttons::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:controller.Buttons)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool x = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->x(), output);
  }

  // optional bool y = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->y(), output);
  }

  // optional bool b = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->b(), output);
  }

  // optional bool a = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->a(), output);
  }

  // optional bool start = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->start(), output);
  }

  // optional bool rb = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->rb(), output);
  }

  // optional bool lb = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->lb(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:controller.Buttons)
}

::google::protobuf::uint8* Buttons::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:controller.Buttons)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool x = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->x(), target);
  }

  // optional bool y = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->y(), target);
  }

  // optional bool b = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->b(), target);
  }

  // optional bool a = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->a(), target);
  }

  // optional bool start = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->start(), target);
  }

  // optional bool rb = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->rb(), target);
  }

  // optional bool lb = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->lb(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:controller.Buttons)
  return target;
}

size_t Buttons::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:controller.Buttons)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional bool x = 1 [default = false];
    if (has_x()) {
      total_size += 1 + 1;
    }

    // optional bool y = 2 [default = false];
    if (has_y()) {
      total_size += 1 + 1;
    }

    // optional bool b = 3 [default = false];
    if (has_b()) {
      total_size += 1 + 1;
    }

    // optional bool a = 4 [default = false];
    if (has_a()) {
      total_size += 1 + 1;
    }

    // optional bool start = 5 [default = false];
    if (has_start()) {
      total_size += 1 + 1;
    }

    // optional bool rb = 6 [default = false];
    if (has_rb()) {
      total_size += 1 + 1;
    }

    // optional bool lb = 7 [default = false];
    if (has_lb()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Buttons::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:controller.Buttons)
  GOOGLE_DCHECK_NE(&from, this);
  const Buttons* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Buttons>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:controller.Buttons)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:controller.Buttons)
    MergeFrom(*source);
  }
}

void Buttons::MergeFrom(const Buttons& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:controller.Buttons)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      b_ = from.b_;
    }
    if (cached_has_bits & 0x00000008u) {
      a_ = from.a_;
    }
    if (cached_has_bits & 0x00000010u) {
      start_ = from.start_;
    }
    if (cached_has_bits & 0x00000020u) {
      rb_ = from.rb_;
    }
    if (cached_has_bits & 0x00000040u) {
      lb_ = from.lb_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Buttons::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:controller.Buttons)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Buttons::CopyFrom(const Buttons& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:controller.Buttons)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Buttons::IsInitialized() const {
  return true;
}

void Buttons::Swap(Buttons* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Buttons::InternalSwap(Buttons* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(b_, other->b_);
  swap(a_, other->a_);
  swap(start_, other->start_);
  swap(rb_, other->rb_);
  swap(lb_, other->lb_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Buttons::GetMetadata() const {
  protobuf_js_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_js_5fevent_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace controller
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::controller::jsEvent* Arena::CreateMaybeMessage< ::controller::jsEvent >(Arena* arena) {
  return Arena::CreateInternal< ::controller::jsEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::controller::Xbox* Arena::CreateMaybeMessage< ::controller::Xbox >(Arena* arena) {
  return Arena::CreateInternal< ::controller::Xbox >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::controller::Axes* Arena::CreateMaybeMessage< ::controller::Axes >(Arena* arena) {
  return Arena::CreateInternal< ::controller::Axes >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::controller::Buttons* Arena::CreateMaybeMessage< ::controller::Buttons >(Arena* arena) {
  return Arena::CreateInternal< ::controller::Buttons >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
